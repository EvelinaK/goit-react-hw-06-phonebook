{"version":3,"sources":["redux/actions.js","components/Form/form.js","components/ContactList/contactList.js","components/Filter/filter.js","App.js","redux/reduser.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","Form","state","nameInputId","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","console","log","props","onSubmit","reset","className","this","htmlFor","type","onChange","Component","connect","dispatch","actions","getVisibleContacts","items","filter","normalizedFilter","toLowerCase","includes","contacts","onDeleteContact","map","onClick","aria-hidden","event","target","App","createReducer","action","combineReducers","persistConfig","key","storage","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contactReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.65cb2264.chunk.js","sourcesContent":["import shortid from \"shortid\";\r\n\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n// const addContact = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\nconst deleteContact = createAction(\"contacts/delete\");\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\nconst changeFilter = createAction(\"contacts/changeFilter\");\r\n// {type: \"timer/increment\", payload: 5}\r\n\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport actions from \"../../redux/actions\";\r\nimport \"./form.scss\";\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    const { name, number } = this.state;\r\n    e.preventDefault();\r\n    if (this.state.name || this.state.number !== \"\") {\r\n      console.log(this.state);\r\n      this.props.onSubmit(name, number);\r\n      this.reset();\r\n      return;\r\n    }\r\n\r\n    console.log(\"пустая строка\");\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"wrapper\">\r\n          <header className=\"page-header\">\r\n            <form className=\"user-info-form\" onSubmit={this.handleSubmit}>\r\n              <label className=\"label\" htmlFor={this.nameInputId}>\r\n                Name\r\n                <input\r\n                  className=\"form-input\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  value={this.state.name}\r\n                  onChange={this.handleChange}\r\n                  id={this.nameInputId}\r\n                ></input>\r\n              </label>\r\n              <label className=\"label\" htmlFor={this.numberInputId}>\r\n                Number\r\n                <input\r\n                  className=\"form-input\"\r\n                  type=\"text\"\r\n                  name=\"number\"\r\n                  value={this.state.number}\r\n                  onChange={this.handleChange}\r\n                  id={this.numberInputId}\r\n                />\r\n              </label>\r\n\r\n              <button className=\"submit-form-btn\" type=\"submit\">\r\n                Add Contact\r\n              </button>\r\n            </form>\r\n          </header>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./contactList.scss\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../redux/actions\";\r\n\r\nconst ContactList = ({ items, onDeleteContact }) => (\r\n  <div className=\"contacts-info-table\">\r\n    <ul className=\"list\">\r\n      {items.map(({ id, name, number }) => (\r\n        <li className=\"actions\" key={id}>\r\n          <span className=\"listItemText\">{name}:</span>\r\n          <span className=\"listItemText\">{number}</span>\r\n          <button\r\n            className=\"button\"\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.array,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (items, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return items.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  items: getVisibleContacts(items, filter),\r\n});\r\n\r\n// const mapStateToProps = (state) => {\r\n//   const { filter, items } = state.contacts;\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   const filtr = items.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n\r\n//   return {\r\n//     items: filtr,\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./filter.scss\";\r\nimport actions from \"../../redux/actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"filterLabel\">\r\n    Find contacts by name\r\n    <input\r\n      className=\"searchInput\"\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n      // onChange={(event = onChange(event.target.value))}\r\n    />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    value: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) => dispatch(actions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\nimport Form from \"./components/Form/form\";\nimport ContactList from \"./components/ContactList/contactList\";\nimport Filter from \"./components/Filter/filter\";\nimport shortid from \"shortid\";\n// import contacts from \"./num.json\";\n\nclass App extends Component {\n  state = {};\n\n  // formSubmitHandler = (name, number) => {\n  //   const { contacts } = this.state;\n\n  //   const newContact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n  //   if (contacts.find((contact) => contact.name === newContact.name)) {\n  //     alert(`${newContact.name} is already in contacts.`);\n  //     return;\n  //   }\n\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [newContact, ...contacts],\n  //   }));\n  // };\n\n  // changeFilter = (e) => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  // getContacts = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  // deleteContact = (contactId) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter(\n  //       (contact) => contact.id !== contactId\n  //     ),\n  //   }));\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem(\"contacts\");\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   // console.log('App componentDidUpdate');\n\n  //   const oldContact = this.state.contacts;\n  //   const newContact = prevState.contacts;\n\n  //   if (oldContact !== newContact) {\n  //     console.log(\"Обновился контакт\");\n  //     localStorage.setItem(\"contacts\", JSON.stringify(oldContact));\n  //   }\n  // }\n\n  render() {\n    // const { filter } = this.state;\n    // const visibleContacts = this.getContacts();\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList\n        // contacts={visibleContacts}\n        // onDeleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/add\":\r\n//       return [...state, payload];\r\n\r\n//     case \"contacts/delete\":\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (state, action) => action.payload,\r\n});\r\n// const filter = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case \"contacts/changeFilter\":\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","// import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport contactReducer from \"./reduser\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n  persistStore,\r\n  persistReducer,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport {\r\n  createStore,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from \"@reduxjs/toolkit\";\r\n\r\nconst persistConfig = {\r\n  key: \"tel\",\r\n  storage,\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default () => {\r\n//   let store = createStore(persistedReducer);\r\n//   let persistor = persistStore(store);\r\n//   return { store, persistor };\r\n// };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}